import os, sys
import datetime
from src.constantes import *


class GeoFile:

    def __init__(self,data):
        self.content = ""
        self.node_load = data['verification_module']['load_node']
        self.node_list = data['geo']['nodes']
        self.node_rep = data['geo']['node_rep']
        self.encas_node = data['geo']['node_group']['encas']
        self.node_group = data['geo']['node_group']
        self.beam_list = data['geo']['beam_list']
        self.beam_group = data['geo']['beam_group']
        self.fleche_node = self.__get_fleche_node(data['geo']['fleche_node'])


    def write(self, file_type):
        content = "//Generated by Osup " + str(datetime.datetime.now().strftime("%b %d %Y %H:%M:%S")) + "\n"
        for node in self.node_list.keys():
            content += "Point(" + str(node) + ") = {" + str(self.node_list[node]["cx"]) + ", " + str(
                self.node_list[node]["cy"]) + ", " + \
                       str(self.node_list[node]["cz"]) + "," + str(self.node_list[node]["cl"])+ "};\n"

        for beam in self.beam_list:
            content += "Line(" + str(beam['id']) + ") = {" + str(beam['n1']) + ", " + str(beam['n2']) + "};\n"

        for gp in self.beam_group:
            content += "\n// Materiau: " + gp['material'] + ", section: " + gp['section'] + ", orientation: " + gp['orientation'] + "\n"
            content += "Physical Line(\"" + gp['id'] + "\") = {" + ", ".join(str(x) for x in gp['beam']) + "};\n"
        # TODO à modifier groupe des noeuds pour prendre en compte les différents types de CL
        content += "\n// DOFs\n"
        for cl in self.node_group.keys():
            # content += "Physical Point(\"encas\") = {" + ", ".join(str(x) for x in self.encas_node) + "};\n"
            if self.node_group[cl] != []:
                content += "Physical Point('" + cl + "') = {" + ", ".join(str(x) for x in self.node_group[cl]) + "};\n"
        content += "\n// All nodes group\n"
        content += "Physical Point(\"ALL\") = {"
        all_node = list(self.node_list.keys())
        content += ",".join(str(x) for x in all_node)
        content += "};\n"
        if file_type == "generate":
            content += "Physical Point(\"load\") = {" + str(self.node_rep[str(self.node_load)][0]) + "};\n"
            content += "Physical Point(\"fleche\") = {" + str(self.fleche_node) + "};\n"
        with open(GEO_FILE, "w", encoding='utf-8') as f:
            f.write(content)
            f.close()

    def __get_fleche_node(self, node_list):
        for node in node_list:
            if node != self.node_load:
                return node

    def open(self):
        try:
            os.startfile(GEO_FILE)
            return True
        except:
            print(sys.exc_info())
            return False

    def new_file(self):
        new_geo = open(GEO_FILE, "w")
        new_geo.close()