fx = 1000
#------------------------ Début dichotomie -------------------------
#TODO modifier le script pour qu'il détecte la direction principale de poutre 
#Pour ce support le frottement est suivant X
from Utilitai.Osup import SharedVar as sv
ratioPlatine = RatioPlatine(value) 
reportFile = open(resultfile,"w")
reportFile.write(f'{version}\n{dash}')
reportFile.write(f'CHARGEMENT: FX={fx}, FY = 0, FZ = 0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = fx,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	CONTRAINTE = ('SIPO_ELNO',),
);
TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
contrainte = TAB_cont.EXTR_TABLE()
Sn = contrainte.SN
Svy = contrainte.SVY
Svz = contrainte.SVZ
Smfy = contrainte.SMFY
Smfz = contrainte.SMFZ
Smt = contrainte.SMT
 
ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
ratioMax = ratio.maxRatio()
IMPR_TABLE (TABLE=TAB_cont,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
#----------------------Borne max FZ------------------------------
a1 = 0
fxMax = fx
while ratioMax < ratioLimProf:    
    fxMax += 500
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ = 0 FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
     
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);

#-----------------------------  FxMax ------------------------------
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a1 = fxMax
    else:
        b1 = fxMax
    fxMax = (a1+b1)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',), RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
     
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);

#----------------------------- FyMax --------------------------------
fyMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)},FY={round(fyMax,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fyMax,FY=fyMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	CONTRAINTE = ('SIPO_ELNO',),
);
TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
contrainte = TAB_cont.EXTR_TABLE()
Sn = contrainte.SN
Svy = contrainte.SVY
Svz = contrainte.SVZ
Smfy = contrainte.SMFY
Smfz = contrainte.SMFZ
Smt = contrainte.SMT
 
ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
ratioMax = ratio.maxRatio()
IMPR_TABLE (TABLE=TAB_cont,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
a2 = 0
b2 = fyMax
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a2 = fyMax
    else:
        b2 = fyMax
    fyMax = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)}, FY = {round(fyMax,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FY=fyMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);

#----------------------------- FzMax --------------------------------
fzMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(f*fzMax,2)}, FY = 0, FZ = {round(fzMax,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fzMax,FZ=fzMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	CONTRAINTE = ('SIPO_ELNO',),
);
TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
contrainte = TAB_cont.EXTR_TABLE()
Sn = contrainte.SN
Svy = contrainte.SVY
Svz = contrainte.SVZ
Smfy = contrainte.SMFY
Smfz = contrainte.SMFZ
Smt = contrainte.SMT
ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
ratioMax = ratio.maxRatio()
IMPR_TABLE (TABLE=TAB_cont,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
a3 = 0
b3 = fzMax
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a3 = fzMax
    else:
        b3 = fzMax
    fzMax = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fzMax,2)} , FY = 0, FZ = {round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fzMax,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
#------------------------------------------------------------------------------------------
osupFile = open(curveFile,"w")
osupFile.write(f'{version}\n')
osupFile.write(f'{dash}\nFX 			FY 			FZ 			Axial 			Flexion 			Cisaillement 			Max\n')
osupFile.write(f'0		{round(f*fzMax,2)}		{round(fzMax,2)}\n')
osupFile.close()
ratio.writeOsupFile(curveFile, f*fzMax, 0, fzMax)
fzMax_init = fzMax
sv.fxCourbeMin.append(0)
sv.fzCourbeMin.append(fzMax)
#----------------------------------QUADRANT 1 FX >0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMax/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax < ratioLimProf:
        fzMax *= 2
    fzCourbe = -fzMax/fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax > ratioLimProf:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    while abs((ratioLimProf-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimProf:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            CONTRAINTE = ('SIPO_ELNO',),
        );
        TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
            
        contrainte = TAB_cont.EXTR_TABLE()
        Sn = contrainte.SN
        Svy = contrainte.SVY
        Svz = contrainte.SVZ
        Smfy = contrainte.SMFY
        Smfz = contrainte.SMFZ
        Smt = contrainte.SMT
        ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
        ratioMax = ratio.maxRatio()
        IMPR_TABLE (TABLE=TAB_cont,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    #-----------------------------------------------------------------------------------------
    ratio.writeOsupFile(curveFile, f*(fy**2+fz**2)**0.5, fy, fz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
osupFile = open(curveFile,"a")
osupFile.write(f'{round(f*fyMax,2)}		{round(fyMax,2)}		0\n')
osupFile.close()
sv.fxCourbeMin.append(fyMax)
sv.fzCourbeMin.append(0)

#-------------------------------------QUADRANT 2 FX<0 FY<0 ---------------------------------------------
#----------------------------- FzMin --------------------------------
fzMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(-f*fzMin,2)}, FY = 0, FZ = {round(fzMin,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = -f*fzMin,FZ=fzMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	CONTRAINTE = ('SIPO_ELNO',),
);
TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
contrainte = TAB_cont.EXTR_TABLE()
Sn = contrainte.SN
Svy = contrainte.SVY
Svz = contrainte.SVZ
Smfy = contrainte.SMFY
Smfz = contrainte.SMFZ
Smt = contrainte.SMT
ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
ratioMax = ratio.maxRatio()
IMPR_TABLE (TABLE=TAB_cont,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
a3 = 0
b3 = fzMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a3 = fzMin
    else:
        b3 = fzMin
    fzMin = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(-f*fzMin,2)} , FY = 0, FZ = {round(fzMin,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fzMin,FZ=fzMin),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
for i in range(1,n):
    fy = fyMax/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMin**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMin,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMin**2)**0.5,FZ=fzMin,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax < ratioLimProf:
        fzMin *= 2
    fzCourbe = fzMin/fyMax*fy + fzMin
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax > ratioLimProf:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = -fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    while abs((ratioLimProf-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimProf:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fx**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            CONTRAINTE = ('SIPO_ELNO',),
        );
        TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
            
        contrainte = TAB_cont.EXTR_TABLE()
        Sn = contrainte.SN
        Svy = contrainte.SVY
        Svz = contrainte.SVZ
        Smfy = contrainte.SMFY
        Smfz = contrainte.SMFZ
        Smt = contrainte.SMT
        ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
        ratioMax = ratio.maxRatio()
        IMPR_TABLE (TABLE=TAB_cont,) 
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    #-----------------------------------------------------------------------------------------
    ratio.writeOsupFile(curveFile, f*(fz**2+fy**2)**0.5, fy, fz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
#----------------------------------QUADRANT 3 FX <0 , FY < 0-------------------------------
fyMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(-f*fyMin,2)},FY={round(fyMin,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = -f*fyMin,FY=fyMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	CONTRAINTE = ('SIPO_ELNO',),
);
TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
contrainte = TAB_cont.EXTR_TABLE()
Sn = contrainte.SN
Svy = contrainte.SVY
Svz = contrainte.SVZ
Smfy = contrainte.SMFY
Smfz = contrainte.SMFZ
Smt = contrainte.SMT
 
ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
ratioMax = ratio.maxRatio()
IMPR_TABLE (TABLE=TAB_cont,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
a2 = 0
b2 = fyMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a2 = fyMin
    else:
        b2 = fyMin
    fyMin = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(-f*fyMin,2)}, FY = {round(fyMin,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = -f*fyMin,FY=fyMin,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
#------------------------------------------------------------------------------------------
for i in range(1,n):
    fy = fyMin/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMin**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMin,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMin**2)**0.5,FZ=fzMin,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax < ratioLimProf:
        fzMin *= 2
    fzCourbe = fzMin/fyMin*fy + fzMin
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FZ=fzCourbe,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax > ratioLimProf:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMin
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    while abs((ratioLimProf-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimProf:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            CONTRAINTE = ('SIPO_ELNO',),
        );
        TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
            
        contrainte = TAB_cont.EXTR_TABLE()
        Sn = contrainte.SN
        Svy = contrainte.SVY
        Svz = contrainte.SVZ
        Smfy = contrainte.SMFY
        Smfz = contrainte.SMFZ
        Smt = contrainte.SMT
        ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
        ratioMax = ratio.maxRatio()
        IMPR_TABLE (TABLE=TAB_cont,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    #-----------------------------------------------------------------------------------------
    ratio.writeOsupFile(curveFile, f*(fy**2+fz**2)**0.5,fy,fz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
ratio.writeOsupFile(curveFile, f*-fyMin,fyMin,0)
sv.fxCourbeMin.append(fyMin)
sv.fzCourbeMin.append(0)
#----------------------------------QUADRANT 4 FX <0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMin/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax < ratioLimProf:
        fzMax *= 2
    fzCourbe = fzMax/-fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);    
    if ratioMax > ratioLimProf:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        CONTRAINTE = ('SIPO_ELNO',),
    );
    TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    contrainte = TAB_cont.EXTR_TABLE()
    Sn = contrainte.SN
    Svy = contrainte.SVY
    Svz = contrainte.SVZ
    Smfy = contrainte.SMFY
    Smfz = contrainte.SMFZ
    Smt = contrainte.SMT
    ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
    ratioMax = ratio.maxRatio()
    IMPR_TABLE (TABLE=TAB_cont,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    while abs((ratioLimProf-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimProf:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FY=fy,FZ=fz),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            CONTRAINTE = ('SIPO_ELNO',),
        );
        TAB_cont = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('ALL',),RESULTAT=stat,NOM_CHAM='SIPO_ELNO',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
            
        contrainte = TAB_cont.EXTR_TABLE()
        Sn = contrainte.SN
        Svy = contrainte.SVY
        Svz = contrainte.SVZ
        Smfy = contrainte.SMFY
        Smfz = contrainte.SMFZ
        Smt = contrainte.SMT
        ratio = Ratio(value,niveau,Sn, Svy, Svz, Smt, Smfy, Smfz)
        ratioMax = ratio.maxRatio()
        IMPR_TABLE (TABLE=TAB_cont,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_cont,),);
    #-----------------------------------------------------------------------------------------
    ratio.writeOsupFile(curveFile, f*(fz**2+fy**2)**0.5, fy, fz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
import matplotlib.pyplot as plt
sv.timefin = time.time()
print("Temps total = ",sv.timefin-sv.timeInit)
plt.plot(sv.fxCourbeMin,sv.fzCourbeMin) 
osupFile = open(curveFile,"a")
osupFile.write(f'0		{round(f*fzMax_init,2)}		{round(fzMax_init,2)}\n')
osupFile.close()

# ------------------------------- PLATINE ------------------------------------
#------------------------ Début dichotomie -------------------------
#TODO modifier le script pour qu'il détecte la direction principale de poutre 
#Pour ce support le frottement est suivant X
reportFile = open(resultfile,"a")
reportFile.write(f'{version}\n{dash}')
reportFile.write(f'CHARGEMENT: FX={fx}, FY = 0, FZ = 0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = fx,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    if nbChevilles[i] =='2':         
        maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    if nbChevilles[i] =='4':
        maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

#----------------------Borne max FX------------------------------

a1 = 0
fxMax = fx
while ratioMax < ratioLimPlat:    
    fxMax += 500
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ = 0 FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    
#-----------------------------  FxMax ------------------------------
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a1 = fxMax
    else:
        b1 = fxMax
    fxMax = (a1+b1)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

#----------------------------- FyMax --------------------------------
fyMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)},FY={round(fyMax,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fyMax,FY=fyMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    if nbChevilles[i] =='2':        
        maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    if nbChevilles[i] =='4':
        maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
while ratioMax < ratioLimPlat:
    fyMax *= 2
    reportFile = open(resultfile,"a")
    reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)},FY={round(fyMax,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FY=fyMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':        
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    
a2 = 0
b2 = fyMax
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a2 = fyMax
    else:
        b2 = fyMax
    fyMax = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)}, FY = {round(fyMax,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FY=fyMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
 
#----------------------------- FzMax --------------------------------
fzMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(f*fzMax,2)}, FY = 0, FZ = {round(fzMax,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fzMax,FZ=fzMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    if nbChevilles[i] =='2':         
        maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    if nbChevilles[i] =='4':
        maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
while ratioMax < ratioLimPlat:
    fzMax *= 2
    reportFile = open(resultfile,"a")
    reportFile.write(f'CHARGEMENT: FX = {round(f*fzMax,2)},FY=0, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FZ=fzMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':        
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a3 = 0
b3 = fzMax
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a3 = fzMax
    else:
        b3 = fzMax
    fzMax = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fzMax,2)} , FY = 0, FZ = {round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fzMax,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
#------------------------------------------------------------------------------------------
osupFile = open(platineFile,"w")
osupFile.write(f'{version}\n')
osupFile.write(f'{dash}\nFX 			FY 			FZ 			Axial 			ratio max\n')
osupFile.write(f'{round(f*fzMax, 3)} 			0 			{round(fzMax,3)}\n')
osupFile.close()
fzMax_init = fzMax
ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
sv.fxCourbeMin.append(0)
sv.fzCourbeMin.append(fzMax)

#----------------------------------QUADRANT 1 FX >0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMax/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = -fzMax/fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);  
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*fyMax,2)}		{round(fyMax,2)}		0\n')
osupFile.close()
sv.fxCourbeMin.append(fyMax)
sv.fzCourbeMin.append(0)

#-------------------------------------QUADRANT 2 FX<0 FY<0 ---------------------------------------------
#----------------------------- FzMin --------------------------------
fzMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(-f*fzMin,2)}, FY = 0, FZ = {round(fzMin,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fzMin,FZ=fzMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);

TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);

torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    if nbChevilles[i] =='2':                 
        maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    if nbChevilles[i] =='4':
        maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a3 = 0
b3 = fzMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a3 = fzMin
    else:
        b3 = fzMin
    fzMin = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(-f*fzMin,2)} , FY = 0, FZ = {round(fzMin,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = -f*fzMin,FZ=fzMin),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );

    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);

    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':                 
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
#------------------------------------------------------------------------------------------
for i in range(1,n):
    fy = fyMax/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(-fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FZ=-fzMax,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);   
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = -fzMax/fyMax*fy - fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = -fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fx**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
    
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
#----------------------------------QUADRANT 3 FX <0 , FY < 0-------------------------------
fyMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(-f*fyMin,2)},FY={round(fyMin,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = -f*fyMin,FY=fyMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);

TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);

torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    if nbChevilles[i] =='2':                 
        maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    if nbChevilles[i] =='4':
        maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a2 = 0
b2 = fyMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a2 = fyMin
    else:
        b2 = fyMin
    fyMin = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*-fyMin,2)}, FY = {round(fyMin,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*-fyMin,FY=fyMin,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);

    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':                 
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*-fzMin,2)}		0		{round(fzMin,2)}\n')
osupFile.close()
sv.fxCourbeMin.append(0)
sv.fzCourbeMin.append(fzMin)
for i in range(1,n):
    fy = fyMin/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2)**0.5,FZ=0,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ    
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);  
    # Pour pas faire de boucle infinie
    while ratioMax > ratioLimPlat:
        fy = (fy + sv.fxCourbeMin[-1])/2 
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2)**0.5,FZ=0,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(-fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMin**2)**0.5,FZ=fzMin,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    if ratioMax < ratioLimPlat:
        fzMin *= 2
    fzCourbe = fzMin/fyMin*fy + fzMin
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FZ=fzCourbe,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);   
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMin
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
sv.fxCourbeMin.append(fyMin)
sv.fzCourbeMin.append(0)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*-fyMin,3)}		{round(fyMin,3)}    0\n')
osupFile.close()
#----------------------------------QUADRANT 4 FX <0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMin/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2)**0.5,FY=fy,FZ=0),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),); 
    while ratioMax > ratioLimPlat:
        if i ==1:
            fy = (fy + sv.fxCourbeMin[-2])/2
        else:
            fy = (fy + sv.fxCourbeMin[-1])/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2)**0.5,FY=fy,FZ=0),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),); 
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = fzMax/fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        if nbChevilles[i] =='2':             
            maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        if nbChevilles[i] =='4':
            maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < 1:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FY=fy,FZ=fz),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
    
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            if nbChevilles[i] =='2':                 
                maxRatio.append(ratioPlatine.ratio2chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
            if nbChevilles[i] =='4':
                maxRatio.append(ratioPlatine.ratio4chevilles(niveau, dx, dy, dz, drx, dry, drz,i))
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
import matplotlib.pyplot as plt
ratioPlatine.get_data(chevilleFile)
sv.timefin = time.time()
print("Temps total = ",sv.timefin-sv.timeInit)
plt.plot(sv.fxCourbeMin,sv.fzCourbeMin)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*fzMax_init, 3)} 			0 			{round(fzMax_init,3)}\n')
osupFile.close()     

# ------------------------------- CHEVILLE ------------------------------------
#------------------------ Début dichotomie -------------------------
#TODO modifier le script pour qu'il détecte la direction principale de poutre 
#Pour ce support le frottement est suivant X
reportFile = open(resultfile,"a")
reportFile.write(f'{version}\n{dash}')
reportFile.write(f'CHARGEMENT: FX={fx}, FY = 0, FZ = 0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = fx,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
    maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

#----------------------Borne max FX------------------------------

a1 = 0
fxMax = fx
while ratioMax < ratioLimPlat:    
    fxMax += 500
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ = 0 FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    
#-----------------------------  FxMax ------------------------------
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a1 = fxMax
    else:
        b1 = fxMax
    fxMax = (a1+b1)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(fxMax,2)}, FY = 0, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = fxMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

#----------------------------- FyMax --------------------------------
fyMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)},FY={round(fyMax,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fyMax,FY=fyMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
    maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
while ratioMax < ratioLimPlat:
    fyMax *= 2
    reportFile = open(resultfile,"a")
    reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)},FY={round(fyMax,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FY=fyMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    
a2 = 0
b2 = fyMax
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a2 = fyMax
    else:
        b2 = fyMax
    fyMax = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fyMax,2)}, FY = {round(fyMax,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FY=fyMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
 
#----------------------------- FzMax --------------------------------
fzMax = fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(f*fzMax,2)}, FY = 0, FZ = {round(fzMax,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fzMax,FZ=fzMax,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);
TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
    maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
while ratioMax < ratioLimPlat:
    fzMax *= 2
    reportFile = open(resultfile,"a")
    reportFile.write(f'CHARGEMENT: FX = {round(f*fzMax,2)},FY=0, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fyMax,FZ=fzMax,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a3 = 0
b3 = fzMax
while abs((ratioLimPlat-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimPlat:
        a3 = fzMax
    else:
        b3 = fzMax
    fzMax = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*fzMax,2)} , FY = 0, FZ = {round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*fzMax,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
#------------------------------------------------------------------------------------------
osupFile = open(platineFile,"w")
osupFile.write(f'{version}\n')
osupFile.write(f'{dash}\nFX 			FY 			FZ 			Axial 			ratio max\n')
osupFile.write(f'{round(f*fzMax, 3)} 			0 			{round(fzMax,3)}\n')
osupFile.close()
fzMax_init = fzMax
ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
sv.fxCourbeMin.append(0)
sv.fzCourbeMin.append(fzMax)

#----------------------------------QUADRANT 1 FX >0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMax/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = -fzMax/fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);  
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*fyMax,2)}		{round(fyMax,2)}		0\n')
osupFile.close()
sv.fxCourbeMin.append(fyMax)
sv.fzCourbeMin.append(0)

#-------------------------------------QUADRANT 2 FX<0 FY<0 ---------------------------------------------
#----------------------------- FzMin --------------------------------
fzMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'{dash}\n')
reportFile.write(f'CHARGEMENT: FX ={round(-f*fzMin,2)}, FY = 0, FZ = {round(fzMin,2)} \n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = f*fzMin,FZ=fzMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);

TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);

torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
    maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a3 = 0
b3 = fzMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a3 = fzMin
    else:
        b3 = fzMin
    fzMin = (a3+b3)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(-f*fzMin,2)} , FY = 0, FZ = {round(fzMin,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = -f*fzMin,FZ=fzMin),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    )
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );

    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);

    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
#------------------------------------------------------------------------------------------
for i in range(1,n):
    fy = fyMax/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(-fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FZ=-fzMax,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);   
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = -fzMax/fyMax*fy - fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = -fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fx**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
    
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
#----------------------------------QUADRANT 3 FX <0 , FY < 0-------------------------------
fyMin = -fxMax/f
reportFile = open(resultfile,"a")
reportFile.write(f'CHARGEMENT: FX = {round(-f*fyMin,2)},FY={round(fyMin,2)}, FZ=0\n')
reportFile.close()
force=AFFE_CHAR_MECA(MODELE=model,
FORCE_NODALE=_F(GROUP_NO=('load',),
	FX = -f*fyMin,FY=fyMin,),
);
stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
EXCIT=(			_F(CHARGE=encast,),
		_F(CHARGE=force,),
    ),
SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
);
stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
);

TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);

torseur = TAB_eff.EXTR_TABLE()
dx = torseur.DX
dy = torseur.DY
dz = torseur.DZ
drx = torseur.DRX
dry = torseur.DRY
drz = torseur.DRZ
 
nbChevilles = value['platine']['nbCheville']
maxRatio = []
for i in range(len(nbChevilles)):
    ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
    maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
ratioMax = max(maxRatio)
IMPR_TABLE (TABLE=TAB_eff,)
DETRUIRE(CONCEPT=_F(NOM=force,),);
DETRUIRE(CONCEPT=_F(NOM=stat,),);
DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
a2 = 0
b2 = fyMin
while abs((ratioLimProf-0.01) - ratioMax) > 0.01:
    if ratioMax < ratioLimProf:
        a2 = fyMin
    else:
        b2 = fyMin
    fyMin = (a2+b2)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*-fyMin,2)}, FY = {round(fyMin,2)}, FZ = 0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*-fyMin,FY=fyMin,),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
	MODELE=model,
	CHAM_MATER=material,
	CARA_ELEM=elemcar,
	RESULTAT = stat,
	FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);

    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);

osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*-fzMin,2)}		0		{round(fzMin,2)}\n')
osupFile.close()
sv.fxCourbeMin.append(0)
sv.fzCourbeMin.append(fzMin)
for i in range(1,n):
    fy = fyMin/n*i    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2)**0.5,FZ=0,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ    
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);  
    # Pour pas faire de boucle infinie
    while ratioMax > ratioLimPlat:
        fy = (fy + sv.fxCourbeMin[-1])/2 
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2)**0.5,FZ=0,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(-fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMin**2)**0.5,FZ=fzMin,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
    GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
    TOUT_ORDRE='OUI',
    OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    if ratioMax < ratioLimPlat:
        fzMin *= 2
    fzCourbe = fzMin/fyMin*fy + fzMin
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FZ=fzCourbe,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);   
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMin
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
	GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
	TOUT_ORDRE='OUI',
	OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < ratioLimPlat:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
sv.fxCourbeMin.append(fyMin)
sv.fzCourbeMin.append(0)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*-fyMin,3)}		{round(fyMin,3)}    0\n')
osupFile.close()
#----------------------------------QUADRANT 4 FX <0 , FY > 0-------------------------------
for i in range(1,n):
    fy = fyMin/n*(n-i)    
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2)**0.5,FY=fy,FZ=0),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),); 
    while ratioMax > ratioLimPlat:
        if i ==1:
            fy = (fy + sv.fxCourbeMin[-2])/2
        else:
            fy = (fy + sv.fxCourbeMin[-1])/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ=0\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2)**0.5,FY=fy,FZ=0),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
        
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
         
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzMax**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fzMax,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzMax**2)**0.5,FY=fy,FZ=fzMax),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),); 
    if ratioMax < ratioLimPlat:
        fzMax *= 2
    fzCourbe = fzMax/fyMax*fy + fzMax
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX = {round(f*(fy**2+fzCourbe**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fzCourbe,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fy**2+fzCourbe**2)**0.5,FY=fy,FZ=fzCourbe),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);    
    if ratioMax > ratioLimPlat:
        alpha = 0
        beta = fzCourbe
    else:
        alpha = fzCourbe
        beta = fzMax
    fz = (alpha + beta)/2
    reportFile = open(resultfile,"a")
    reportFile.write(f'{dash}\n')
    reportFile.write(f'CHARGEMENT: FX ={round(f*(fy**2+fz**2)**0.5,2)}, FY = {round(fy,2)}, FZ={round(fz,2)}\n')
    reportFile.close()
    force=AFFE_CHAR_MECA(MODELE=model,
    FORCE_NODALE=_F(GROUP_NO=('load',),
        FX = f*(fz**2+fy**2)**0.5,FZ=fz,FY=fy),
    );
    stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
    EXCIT=(			_F(CHARGE=encast,),
            _F(CHARGE=force,),
        ),
    SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
    );
    stat=CALC_CHAMP( reuse =stat,
        MODELE=model,
        CHAM_MATER=material,
        CARA_ELEM=elemcar,
        RESULTAT = stat,
        FORCE = ('REAC_NODA',),
    );
    TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
        GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
        TOUT_ORDRE='OUI',
        OPERATION='EXTRACTION',),);
    
    torseur = TAB_eff.EXTR_TABLE()
    dx = torseur.DX
    dy = torseur.DY
    dz = torseur.DZ
    drx = torseur.DRX
    dry = torseur.DRY
    drz = torseur.DRZ
     
    nbChevilles = value['platine']['nbCheville']
    maxRatio = []
    for i in range(len(nbChevilles)):
        ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
        maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
    ratioMax = max(maxRatio)
    IMPR_TABLE (TABLE=TAB_eff,)
    DETRUIRE(CONCEPT=_F(NOM=force,),);
    DETRUIRE(CONCEPT=_F(NOM=stat,),);
    DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    while abs((ratioLimPlat-0.01)-ratioMax) > 0.01:
        if ratioMax < 1:
            alpha = fz
        else:
            beta = fz
        fz = (alpha+beta)/2
        reportFile = open(resultfile,"a")
        reportFile.write(f'{dash}\n')
        reportFile.write(f'CHARGEMENT: FX = {round(f*(fz**2+fy**2)**0.5,2)}, FY = {round(fy,2)}, FZ = {round(fz,2)}\n')
        reportFile.close()
        force=AFFE_CHAR_MECA(MODELE=model,
        FORCE_NODALE=_F(GROUP_NO=('load',),
            FX = f*(fy**2+fz**2)**0.5,FY=fy,FZ=fz),
        );
        stat=MECA_STATIQUE(MODELE=model,CHAM_MATER=material,CARA_ELEM=elemcar,
        EXCIT=(			_F(CHARGE=encast,),
                _F(CHARGE=force,),
            ),
        SOLVEUR=_F(RESI_RELA=1.E-04,NPREC=11,),
        );
        stat=CALC_CHAMP( reuse =stat,
            MODELE=model,
            CHAM_MATER=material,
            CARA_ELEM=elemcar,
            RESULTAT = stat,
            FORCE = ('REAC_NODA',),
        );
        TAB_eff = POST_RELEVE_T(ACTION=_F(INTITULE='sum reactions',
            GROUP_NO = ('encas',),RESULTAT=stat,NOM_CHAM='REAC_NODA',TOUT_CMP='OUI',
            TOUT_ORDRE='OUI',
            OPERATION='EXTRACTION',),);
    
        torseur = TAB_eff.EXTR_TABLE()
        dx = torseur.DX
        dy = torseur.DY
        dz = torseur.DZ
        drx = torseur.DRX
        dry = torseur.DRY
        drz = torseur.DRZ
        nbChevilles = value['platine']['nbCheville']
        maxRatio = []
        for i in range(len(nbChevilles)):
            ratio_cheville = Criteria(value['chevilles'], dx[i], dy[i], dz[i], drx[i], dry[i], drz[i], i)    
            maxRatio.append(ratio_cheville.calculation_criteria_traction_shearing())
        ratioMax = max(maxRatio)
        IMPR_TABLE (TABLE=TAB_eff,)
        DETRUIRE(CONCEPT=_F(NOM=force,),);
        DETRUIRE(CONCEPT=_F(NOM=stat,),);
        DETRUIRE(CONCEPT=_F(NOM=TAB_eff,),);
    #-----------------------------------------------------------------------------------------
    osupFile = open(platineFile,"a")
    osupFile.write(f'{round(f*((fz**2+fy**2)**0.5),3)}		{round(fy,3)}		{round(fz,3)}		{round(ratioMax,3)}\n')
    osupFile.close()
    ratioPlatine.append_reaction(dx,dy,dz,drx,dry,drz)
    sv.fxCourbeMin.append(fy)
    sv.fzCourbeMin.append(fz)
import matplotlib.pyplot as plt
ratioPlatine.get_data(chevilleFile)
sv.timefin = time.time()
print("Temps total = ",sv.timefin-sv.timeInit)
plt.plot(sv.fxCourbeMin,sv.fzCourbeMin)
osupFile = open(platineFile,"a")
osupFile.write(f'{round(f*fzMax_init, 3)} 			0 			{round(fzMax_init,3)}\n')
osupFile.close()     
FIN()    